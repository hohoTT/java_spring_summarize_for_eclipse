package com.wt.proxy;

import java.lang.reflect.Array;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.Arrays;

import com.wt.interfaces.ArithmetiCalculator;

public class ArithmetiCalculatorLoggingProxy {
	
	// 要代理的对象
	private ArithmetiCalculator target;
	
	public ArithmetiCalculatorLoggingProxy(ArithmetiCalculator target) {
		this.target = target;
	}
	
	public ArithmetiCalculator getLoggingProxy(){
		
		ArithmetiCalculator proxy = null;
		
		// 代理对象由哪一个类加载器负责加载
		ClassLoader loader = target.getClass().getClassLoader();
		
		// 代理对象的类型，即其中有哪些方法 
		Class [] interfaces = new Class[]{ArithmetiCalculator.class};
		
		// 当调用代理对象其中的方法时，该执行的代码
		InvocationHandler h = new InvocationHandler() {
			/**
			 *  proxy : 正在返回的那个代理对象。一般情况下，在 invoke 方法中都不使用该对象。
			 *  		注意此处不调用 proxy 的内容使用，调用时会出现死循环的情况
			 *  method : 正在被调用的方法
			 *  args : 调用方法时，传入的参数
			 */
			@Override
			public Object invoke(Object proxy, Method method, Object[] args)
					throws Throwable {
				
				String methodName = method.getName();
				System.out.println("invoke...");
				// 日志
				System.out.println("The method " + methodName + "begins with " + Arrays.asList(args));
				
				// 执行方法
				Object result = method.invoke(target, args);
				
				// 日志
				System.out.println("The method " + methodName + "end with " + result);
				
				return result;
			}
		};
		
		proxy = (ArithmetiCalculator) Proxy.newProxyInstance(loader, interfaces, h);
		
		return proxy;
		
	}

}
