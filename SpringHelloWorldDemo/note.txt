一、IOC 和 DI

	IOC(Inversion of Control)：
		其思想是反转资源获取的方向. 传统的资源查找方式要求组件向容器发起请求查找资源. 
		作为回应, 容器适时的返回资源. 而应用了 IOC 之后, 则是容器主动地将资源推送给
		它所管理的组件, 组件所要做的仅是选择一种合适的方式来接受资源. 这种行为也被称为
		查找的被动形式
		
		IOC容器就是具有依赖注入功能的容器，IOC容器负责实例化、定位、配置应用程序中的对象
		及建立这些对象间的依赖。应用程序无需直接在代码中new相关的对象，应用程序由IOC容器
		进行组装。在Spring中BeanFactory是IOC容器的实际代表者。
		
		Spring IOC容器如何知道哪些是它管理的对象呢？这就需要配置文件，Spring IOC容器
		通过读取配置文件中的配置元数据，通过元数据对应用中的各个对象进行实例化及装配。一般使用
		基于xml配置文件进行配置元数据，而且Spring与配置文件完全解耦的，可以使用其他任何可能
		的方式进行配置元数据，比如注解、基于java文件的、基于属性文件的配置都可以。
		
	DI(Dependency Injection) ― IOC 的另一种表述方式：
		即组件以一些预先定义好的方式(例如: setter 方法)接受来自如容器的资源注入. 
		相对于 IOC 而言，这种表述更直接
		
二、 Bean的概念

	IOC容器管理的那些组成你应用程序的对象我们就叫它Bean， Bean就是由Spring容器初始化、装配
	及管理的对象，除此之外，bean就与应用程序中的其他对象没有什么区别了。那IOC怎样确定如何实例化
	Bean、管理Bean之间的依赖关系以及管理Bean呢？这就需要配置元数据，在Spring中由
	BeanDefinition代表，后边会详细介绍，配置元数据指定如何实例化Bean、如何组装Bean等。

	
	
	